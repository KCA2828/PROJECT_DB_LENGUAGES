ALTER SESSION SET "_ORACLE_SCRIPT"=TRUE;

-- Creación de la tabla PROVEEDOR
CREATE TABLE PROVEEDOR (
    ID_PROVEEDOR NUMBER PRIMARY KEY,
    NOMBRE VARCHAR2(50),
    DIRECCION VARCHAR2(100),
    CORREO VARCHAR2(100),
    TELEFONO VARCHAR2(20)
);

-- Creación de la tabla DEPARTAMENTO 
CREATE TABLE DEPARTAMENTO (
    ID_DEPARTAMENTO NUMBER PRIMARY KEY,
    NOMBRE VARCHAR2(100)
);

-- Creación de la tabla CLIENTE
CREATE TABLE CLIENTE (
    ID_CLIENTE NUMBER PRIMARY KEY,
    NOMBRE VARCHAR2(50),
    APELLIDO VARCHAR2(50),
    DIRECCION VARCHAR2(100),
    CORREO VARCHAR2(100),
    TELEFONO VARCHAR2(20)
);

-- Creación de la tabla PRODUCTO
CREATE TABLE PRODUCTO (
    ID_PRODUCTO NUMBER PRIMARY KEY,
    NOMBRE VARCHAR2(50),
    PRECIO NUMBER,
    CANTIDAD NUMBER,
    FECHA_VENCIMIENTO DATE
);

-- Creación de la tabla COMPRA
CREATE TABLE COMPRA (
    ID_COMPRA NUMBER PRIMARY KEY,
    FECHA DATE,
    GANANCIA NUMBER,
    ID_CLIENTE NUMBER,
    ID_PRODUCTO NUMBER,
    CONSTRAINT FK_COMPRA_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE),
    CONSTRAINT FK_COMPRA_PRODUCTO FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTO(ID_PRODUCTO) -- Constraint para la llave foránea ID_PRODUCTO
);

-- Creación de la tabla INGREDIENTE
CREATE TABLE INGREDIENTE (
    ID_INGREDIENTE NUMBER PRIMARY KEY,
    NOMBRE VARCHAR2(50),
    CANTIDAD NUMBER,
    PRECIO_UNITARIO NUMBER,
    ID_PROVEEDOR NUMBER,
    CONSTRAINT FK_INGREDIENTE_PROVEEDOR FOREIGN KEY (ID_PROVEEDOR) REFERENCES PROVEEDOR(ID_PROVEEDOR)
);

-- Creación de la tabla RECETA
CREATE TABLE RECETA (
    ID_RECETA NUMBER PRIMARY KEY,
    NOMBRE_RECETA VARCHAR2(100)
);

-- Creación de la tabla de union INGREDIENTE_RECETA
CREATE TABLE INGREDIENTE_RECETA (
    ID_RECETA NUMBER,
    ID_INGREDIENTE NUMBER,
    CANTIDAD NUMBER,
    CONSTRAINT FK_INGREDIENTE_RECETA_RECETA FOREIGN KEY (ID_RECETA) REFERENCES RECETA(ID_RECETA),
    CONSTRAINT FK_INGREDIENTE_RECETA_INGREDIENTE FOREIGN KEY (ID_INGREDIENTE) REFERENCES INGREDIENTE(ID_INGREDIENTE),
    CONSTRAINT CK_INGREDIENTE_RECETA_CANTIDAD CHECK (CANTIDAD > 0)
);

-- Creación de la tabla ORDEN
CREATE TABLE ORDEN (
    ID_ORDEN NUMBER PRIMARY KEY,
    FECHA_ORDEN DATE,
    ESTADO_ORDEN VARCHAR2(50),
    ID_CLIENTE NUMBER,
    ID_PRODUCTO NUMBER, 
    CONSTRAINT FK_ORDEN_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE),
    CONSTRAINT FK_ORDEN_PRODUCTO FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTO(ID_PRODUCTO) -- Constraint para la llave foránea ID_PRODUCTO
);

-- Creación de la tabla EMPLEADO
CREATE TABLE EMPLEADO (
    ID_EMPLEADO NUMBER PRIMARY KEY,
    NOMBRE VARCHAR2(50),
    APELLIDO VARCHAR2(50),
    PUESTO VARCHAR2(50),
    SALARIO NUMBER,
    FECHA_CONTRATACION DATE,
    ID_DEPARTAMENTO NUMBER,
    CONSTRAINT FK_EMPLEADO_DEPARTAMENTO FOREIGN KEY (ID_DEPARTAMENTO) REFERENCES DEPARTAMENTO(ID_DEPARTAMENTO)
);




-- Procedimientos almacenados

-- TABLA PROVEEDORES
CREATE OR REPLACE PROCEDURE CREAR_PROVEEDOR(
    p_id_proveedor IN NUMBER,
    p_nombre IN VARCHAR2,
    p_direccion IN VARCHAR2,
    p_correo IN VARCHAR2,
    p_telefono IN VARCHAR2
)
AS
BEGIN
    INSERT INTO PROVEEDOR (ID_PROVEEDOR, NOMBRE, DIRECCION, CORREO, TELEFONO)
    VALUES (p_id_proveedor, p_nombre, p_direccion, p_correo, p_telefono);
    COMMIT;
END CREAR_PROVEEDOR;
/

CREATE OR REPLACE PROCEDURE ACTUALIZAR_PROVEEDOR(
    p_id_proveedor IN NUMBER,
    p_nombre IN VARCHAR2,
    p_direccion IN VARCHAR2,
    p_correo IN VARCHAR2,
    p_telefono IN VARCHAR2
)
AS
BEGIN
    UPDATE PROVEEDOR
    SET NOMBRE = p_nombre,
        DIRECCION = p_direccion,
        CORREO = p_correo,
        TELEFONO = p_telefono
    WHERE ID_PROVEEDOR = p_id_proveedor;
    COMMIT;
END ACTUALIZAR_PROVEEDOR;
/

CREATE OR REPLACE PROCEDURE ELIMINAR_PROVEEDOR(
    p_id_proveedor IN NUMBER
)
AS
BEGIN
    DELETE FROM PROVEEDOR
    WHERE ID_PROVEEDOR = p_id_proveedor;
    COMMIT;
END ELIMINAR_PROVEEDOR;
/

-- TABLA CLIENTES
CREATE OR REPLACE PROCEDURE CREAR_CLIENTE(
    p_id_cliente IN NUMBER,
    p_nombre IN VARCHAR2,
    p_apellido IN VARCHAR2,
    p_direccion IN VARCHAR2,
    p_correo IN VARCHAR2,
    p_telefono IN VARCHAR2
)
AS
BEGIN
    INSERT INTO CLIENTE (ID_CLIENTE, NOMBRE, APELLIDO, DIRECCION, CORREO, TELEFONO)
    VALUES (p_id_cliente, p_nombre, p_apellido, p_direccion, p_correo, p_telefono);
    COMMIT;
END CREAR_CLIENTE;
/

CREATE OR REPLACE PROCEDURE ACTUALIZAR_CLIENTE(
    p_id_cliente IN NUMBER,
    p_nombre IN VARCHAR2,
    p_apellido IN VARCHAR2,
    p_direccion IN VARCHAR2,
    p_correo IN VARCHAR2,
    p_telefono IN VARCHAR2
)
AS
BEGIN
    UPDATE CLIENTE
    SET NOMBRE = p_nombre,
        APELLIDO = p_apellido,
        DIRECCION = p_direccion,
        CORREO = p_correo,
        TELEFONO = p_telefono
    WHERE ID_CLIENTE = p_id_cliente;
    COMMIT;
END ACTUALIZAR_CLIENTE;
/

CREATE OR REPLACE PROCEDURE ELIMINAR_CLIENTE(
    p_id_cliente IN NUMBER
)
AS
BEGIN
    DELETE FROM CLIENTE
    WHERE ID_CLIENTE = p_id_cliente;
    COMMIT;
END ELIMINAR_CLIENTE;
/

-- TABLA DEPARTAMENTO

-- Procedimiento para crear un departamento
CREATE OR REPLACE PROCEDURE CREAR_DEPARTAMENTO(
    p_id_departamento IN NUMBER,
    p_nombre IN VARCHAR2
)
AS
BEGIN
    INSERT INTO DEPARTAMENTO (ID_DEPARTAMENTO, NOMBRE)
    VALUES (p_id_departamento, p_nombre);
    COMMIT;
END CREAR_DEPARTAMENTO;
/

-- Procedimiento para actualizar un departamento
CREATE OR REPLACE PROCEDURE ACTUALIZAR_DEPARTAMENTO(
    p_id_departamento IN NUMBER,
    p_nombre IN VARCHAR2
)
AS
BEGIN
    UPDATE DEPARTAMENTO
    SET NOMBRE = p_nombre
    WHERE ID_DEPARTAMENTO = p_id_departamento;
    COMMIT;
END ACTUALIZAR_DEPARTAMENTO;
/

-- Procedimiento para eliminar un departamento
CREATE OR REPLACE PROCEDURE ELIMINAR_DEPARTAMENTO(
    p_id_departamento IN NUMBER
)
AS
BEGIN
    DELETE FROM DEPARTAMENTO
    WHERE ID_DEPARTAMENTO = p_id_departamento;
    COMMIT;
END ELIMINAR_DEPARTAMENTO;
/

-- TABLA PRODUCTO

-- Procedimiento para crear un producto
CREATE OR REPLACE PROCEDURE CREAR_PRODUCTO(
    p_id_producto IN NUMBER,
    p_nombre IN VARCHAR2,
    p_precio IN NUMBER,
    p_cantidad IN NUMBER,
    p_fecha_vencimiento IN DATE
)
AS
BEGIN
    INSERT INTO PRODUCTO (ID_PRODUCTO, NOMBRE, PRECIO, CANTIDAD, FECHA_VENCIMIENTO)
    VALUES (p_id_producto, p_nombre, p_precio, p_cantidad, p_fecha_vencimiento);
    COMMIT;
END CREAR_PRODUCTO;
/

-- Procedimiento para actualizar un producto
CREATE OR REPLACE PROCEDURE ACTUALIZAR_PRODUCTO(
    p_id_producto IN NUMBER,
    p_nombre IN VARCHAR2,
    p_precio IN NUMBER,
    p_cantidad IN NUMBER,
    p_fecha_vencimiento IN DATE
)
AS
BEGIN
    UPDATE PRODUCTO
    SET NOMBRE = p_nombre,
        PRECIO = p_precio,
        CANTIDAD = p_cantidad,
        FECHA_VENCIMIENTO = p_fecha_vencimiento
    WHERE ID_PRODUCTO = p_id_producto;
    COMMIT;
END ACTUALIZAR_PRODUCTO;
/

-- Procedimiento para eliminar un producto
CREATE OR REPLACE PROCEDURE ELIMINAR_PRODUCTO(
    p_id_producto IN NUMBER
)
AS
BEGIN
    DELETE FROM PRODUCTO
    WHERE ID_PRODUCTO = p_id_producto;
    COMMIT;
END ELIMINAR_PRODUCTO;
/

-- TABLA COMPRA 

-- Procedimiento para crear una compra
CREATE OR REPLACE PROCEDURE CREAR_COMPRA(
    p_id_compra IN NUMBER,
    p_fecha IN DATE,
    p_ganancia IN NUMBER,
    p_id_cliente IN NUMBER,
    p_id_producto IN NUMBER
)
AS
BEGIN
    INSERT INTO COMPRA (ID_COMPRA, FECHA, GANANCIA, ID_CLIENTE, ID_PRODUCTO)
    VALUES (p_id_compra, p_fecha, p_ganancia, p_id_cliente, p_id_producto);
    COMMIT;
END CREAR_COMPRA;
/

-- Procedimiento para actualizar una compra (Nota: Normalmente no se actualizan las compras)
CREATE OR REPLACE PROCEDURE ACTUALIZAR_COMPRA(
    p_id_compra IN NUMBER,
    p_fecha IN DATE,
    p_ganancia IN NUMBER,
    p_id_cliente IN NUMBER,
    p_id_producto IN NUMBER
)
AS
BEGIN
    UPDATE COMPRA
    SET FECHA = p_fecha,
        GANANCIA = p_ganancia,
        ID_CLIENTE = p_id_cliente,
        ID_PRODUCTO = p_id_producto
    WHERE ID_COMPRA = p_id_compra;
    COMMIT;
END ACTUALIZAR_COMPRA;
/

-- Procedimiento para eliminar una compra
CREATE OR REPLACE PROCEDURE ELIMINAR_COMPRA(
    p_id_compra IN NUMBER
)
AS
BEGIN
    DELETE FROM COMPRA
    WHERE ID_COMPRA = p_id_compra;
    COMMIT;
END ELIMINAR_COMPRA;
/

-- TABLA INGREDIENTE

-- Procedimiento para crear un ingrediente
CREATE OR REPLACE PROCEDURE CREAR_INGREDIENTE(
    p_id_ingrediente IN NUMBER,
    p_nombre IN VARCHAR2,
    p_cantidad IN NUMBER,
    p_precio_unitario IN NUMBER,
    p_id_proveedor IN NUMBER
)
AS
BEGIN
    INSERT INTO INGREDIENTE (ID_INGREDIENTE, NOMBRE, CANTIDAD, PRECIO_UNITARIO, ID_PROVEEDOR)
    VALUES (p_id_ingrediente, p_nombre, p_cantidad, p_precio_unitario, p_id_proveedor);
    COMMIT;
END CREAR_INGREDIENTE;
/

-- Procedimiento para actualizar un ingrediente
CREATE OR REPLACE PROCEDURE ACTUALIZAR_INGREDIENTE(
    p_id_ingrediente IN NUMBER,
    p_nombre IN VARCHAR2,
    p_cantidad IN NUMBER,
    p_precio_unitario IN NUMBER,
    p_id_proveedor IN NUMBER
)
AS
BEGIN
    UPDATE INGREDIENTE
    SET NOMBRE = p_nombre,
        CANTIDAD = p_cantidad,
        PRECIO_UNITARIO = p_precio_unitario,
        ID_PROVEEDOR = p_id_proveedor
    WHERE ID_INGREDIENTE = p_id_ingrediente;
    COMMIT;
END ACTUALIZAR_INGREDIENTE;
/

-- Procedimiento para eliminar un ingrediente
CREATE OR REPLACE PROCEDURE ELIMINAR_INGREDIENTE(
    p_id_ingrediente IN NUMBER
)
AS
BEGIN
    DELETE FROM INGREDIENTE
    WHERE ID_INGREDIENTE = p_id_ingrediente;
    COMMIT;
END ELIMINAR_INGREDIENTE;
/

-- TABLA RECETA

-- Procedimiento para crear una receta
CREATE OR REPLACE PROCEDURE CREAR_RECETA(
    p_id_receta IN NUMBER,
    p_nombre_receta IN VARCHAR2
)
AS
BEGIN
    INSERT INTO RECETA (ID_RECETA, NOMBRE_RECETA)
    VALUES (p_id_receta, p_nombre_receta);
    COMMIT;
END CREAR_RECETA;
/

-- Procedimiento para actualizar una receta
CREATE OR REPLACE PROCEDURE ACTUALIZAR_RECETA(
    p_id_receta IN NUMBER,
    p_nombre_receta IN VARCHAR2
)
AS
BEGIN
    UPDATE RECETA
    SET NOMBRE_RECETA = p_nombre_receta
    WHERE ID_RECETA = p_id_receta;
    COMMIT;
END ACTUALIZAR_RECETA;
/

-- Procedimiento para eliminar una receta
CREATE OR REPLACE PROCEDURE ELIMINAR_RECETA(
    p_id_receta IN NUMBER
)
AS
BEGIN
    DELETE FROM RECETA
    WHERE ID_RECETA = p_id_receta;
    COMMIT;
END ELIMINAR_RECETA;
/

-- TABLA INGREDIENTE_RECETA

-- Procedimiento para crear una relación entre ingrediente y receta
CREATE OR REPLACE PROCEDURE CREAR_INGREDIENTE_RECETA(
    p_id_receta IN NUMBER,
    p_id_ingrediente IN NUMBER,
    p_cantidad IN NUMBER
)
AS
BEGIN
    INSERT INTO INGREDIENTE_RECETA (ID_RECETA, ID_INGREDIENTE, CANTIDAD)
    VALUES (p_id_receta, p_id_ingrediente, p_cantidad);
    COMMIT;
END CREAR_INGREDIENTE_RECETA;
/

-- Procedimiento para actualizar la cantidad de un ingrediente en una receta (Nota: Normalmente no se actualiza esta información)
CREATE OR REPLACE PROCEDURE ACTUALIZAR_INGREDIENTE_RECETA(
    p_id_receta IN NUMBER,
    p_id_ingrediente IN NUMBER,
    p_cantidad IN NUMBER
)
AS
BEGIN
    UPDATE INGREDIENTE_RECETA
    SET CANTIDAD = p_cantidad
    WHERE ID_RECETA = p_id_receta AND ID_INGREDIENTE = p_id_ingrediente;
    COMMIT;
END ACTUALIZAR_INGREDIENTE_RECETA;
/

-- Procedimiento para eliminar una relación entre ingrediente y receta
CREATE OR REPLACE PROCEDURE ELIMINAR_INGREDIENTE_RECETA(
    p_id_receta IN NUMBER,
    p_id_ingrediente IN NUMBER
)
AS
BEGIN
    DELETE FROM INGREDIENTE_RECETA
    WHERE ID_RECETA = p_id_receta AND ID_INGREDIENTE = p_id_ingrediente;
    COMMIT;
END ELIMINAR_INGREDIENTE_RECETA;
/

-- TABLA ORDEN

-- Procedimiento para crear una orden
CREATE OR REPLACE PROCEDURE CREAR_ORDEN(
    p_id_orden IN NUMBER,
    p_fecha_orden IN DATE,
    p_estado_orden IN VARCHAR2,
    p_id_cliente IN NUMBER,
    p_id_producto IN NUMBER
)
AS
BEGIN
    INSERT INTO ORDEN (ID_ORDEN, FECHA_ORDEN, ESTADO_ORDEN, ID_CLIENTE, ID_PRODUCTO)
    VALUES (p_id_orden, p_fecha_orden, p_estado_orden, p_id_cliente, p_id_producto);
    COMMIT;
END CREAR_ORDEN;
/

-- Procedimiento para actualizar una orden (Nota: Normalmente no se actualizan las órdenes)
CREATE OR REPLACE PROCEDURE ACTUALIZAR_ORDEN(
    p_id_orden IN NUMBER,
    p_fecha_orden IN DATE,
    p_estado_orden IN VARCHAR2,
    p_id_cliente IN NUMBER,
    p_id_producto IN NUMBER
)
AS
BEGIN
    UPDATE ORDEN
    SET FECHA_ORDEN = p_fecha_orden,
        ESTADO_ORDEN = p_estado_orden,
        ID_CLIENTE = p_id_cliente,
        ID_PRODUCTO = p_id_producto
    WHERE ID_ORDEN = p_id_orden;
    COMMIT;
END ACTUALIZAR_ORDEN;
/

-- Procedimiento para eliminar una orden
CREATE OR REPLACE PROCEDURE ELIMINAR_ORDEN(
    p_id_orden IN NUMBER
)
AS
BEGIN
    DELETE FROM ORDEN
    WHERE ID_ORDEN = p_id_orden;
    COMMIT;
END ELIMINAR_ORDEN;
/




-- Vistas

-- Vista para mostrar la información completa de los clientes
CREATE OR REPLACE VIEW V_CLIENTES AS
SELECT *
FROM CLIENTE;

-- Vista para mostrar la información completa de los productos
CREATE OR REPLACE VIEW V_PRODUCTOS AS
SELECT *
FROM PRODUCTO;

-- Vista para mostrar la información completa de las compras realizadas
CREATE OR REPLACE VIEW V_COMPRAS AS
SELECT *
FROM COMPRA;

-- Vista para mostrar la información completa de los proveedores de ingredientes
CREATE OR REPLACE VIEW V_PROVEEDORES_INGREDIENTES AS
SELECT *
FROM PROVEEDOR
WHERE ID_PROVEEDOR IN (SELECT ID_PROVEEDOR FROM INGREDIENTE);

-- Vista para mostrar la información completa de los ingredientes
CREATE OR REPLACE VIEW V_INGREDIENTES AS
SELECT *
FROM INGREDIENTE;

-- Vista para mostrar la información completa de las recetas
CREATE OR REPLACE VIEW V_RECETAS AS
SELECT *
FROM RECETA;

-- Vista para mostrar la información completa de las órdenes
CREATE OR REPLACE VIEW V_ORDENES AS
SELECT *
FROM ORDEN;

-- Vista para mostrar la información completa de los empleados
CREATE OR REPLACE VIEW V_EMPLEADOS AS
SELECT *
FROM EMPLEADO;

-- Vista para mostrar la información completa de los departamentos
CREATE OR REPLACE VIEW V_DEPARTAMENTOS AS
SELECT *
FROM DEPARTAMENTO;

-- Vista para mostrar la información completa de los ingredientes y sus recetas asociadas
CREATE OR REPLACE VIEW V_INGREDIENTES_RECETAS AS
SELECT IR.ID_INGREDIENTE, IR.ID_RECETA, IR.CANTIDAD AS CANTIDAD_INGREDIENTE,
       I.NOMBRE AS NOMBRE_INGREDIENTE, R.NOMBRE_RECETA
FROM INGREDIENTE_RECETA IR
JOIN INGREDIENTE I ON IR.ID_INGREDIENTE = I.ID_INGREDIENTE
JOIN RECETA R ON IR.ID_RECETA = R.ID_RECETA;


-- Funciones
CREATE OR REPLACE FUNCTION CONSULTAR_INGREDIENTES(
    p_nombre_ingrediente IN VARCHAR2
) RETURN VARCHAR2
IS
    v_info_ingrediente VARCHAR2(4000);
BEGIN
    -- Buscar la información del ingrediente
    SELECT 'Cantidad: ' || i.CANTIDAD || ', Precio unitario: ' || i.PRECIO_UNITARIO || ', Proveedor: ' || p.NOMBRE
    INTO v_info_ingrediente
    FROM INGREDIENTE i
    INNER JOIN PROVEEDOR p ON i.ID_PROVEEDOR = p.ID_PROVEEDOR
    WHERE i.NOMBRE = p_nombre_ingrediente;

    RETURN v_info_ingrediente;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'No se encontró ningún ingrediente con ese nombre.';
    WHEN OTHERS THEN
        RETURN 'Ocurrió un error al procesar la solicitud.';
END CONSULTAR_INGREDIENTES;
/

CREATE OR REPLACE FUNCTION MOSTRAR_ORDEN_POR_CLIENTE (
    nombre_cliente IN VARCHAR2
) RETURN VARCHAR2
AS
    v_resultado VARCHAR2(4000); -- Se asume que la longitud máxima del resultado es de 4000 caracteres
BEGIN
    -- Obtener el ID del cliente basado en su nombre
    DECLARE
        v_cliente_id CLIENTE.ID_CLIENTE%TYPE;
    BEGIN
        SELECT ID_CLIENTE INTO v_cliente_id
        FROM CLIENTE
        WHERE UPPER(NOMBRE) = UPPER(nombre_cliente);
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN 'El cliente ' || nombre_cliente || ' no tiene órdenes.';
    END;

    -- Mostrar las órdenes del cliente
    FOR orden_rec IN (SELECT ORDEN.ID_ORDEN, ORDEN.FECHA_ORDEN, ORDEN.ESTADO_ORDEN, ORDEN.ID_PRODUCTO, PRODUCTO.NOMBRE AS NOMBRE_PRODUCTO
                      FROM ORDEN
                      JOIN PRODUCTO ON ORDEN.ID_PRODUCTO = PRODUCTO.ID_PRODUCTO
                      WHERE ORDEN.ID_CLIENTE = v_cliente_id) LOOP
        v_resultado := v_resultado || 'ID de Orden: ' || orden_rec.ID_ORDEN || ', Fecha de Orden: ' || TO_CHAR(orden_rec.FECHA_ORDEN, 'DD-MON-YYYY') || ', Estado de Orden: ' || orden_rec.ESTADO_ORDEN || ', ID de Producto: ' || orden_rec.ID_PRODUCTO || ', Nombre del Producto: ' || orden_rec.NOMBRE_PRODUCTO || CHR(10);
    END LOOP;

    RETURN v_resultado;
END MOSTRAR_ORDEN_POR_CLIENTE;
/

CREATE OR REPLACE FUNCTION OBTENER_EMPLEADO_POR_NOMBRE (
    nombre_empleado IN VARCHAR2
) RETURN VARCHAR2
AS
    v_resultado VARCHAR2(4000);
BEGIN
    -- Obtener el ID del empleado basado en su nombre
    DECLARE
        v_empleado_id EMPLEADO.ID_EMPLEADO%TYPE;
        v_departamento_nombre DEPARTAMENTO.NOMBRE%TYPE;
    BEGIN
        SELECT ID_EMPLEADO INTO v_empleado_id
        FROM EMPLEADO
        WHERE UPPER(NOMBRE) = UPPER(nombre_empleado);
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN 'No se encontró ningún empleado con el nombre ' || nombre_empleado;
    END;

    -- Obtener los detalles del empleado
    SELECT e.ID_EMPLEADO || ', ' || e.NOMBRE || ', ' || e.APELLIDO || ', ' || e.PUESTO || ', ' || e.SALARIO || ', ' || TO_CHAR(e.FECHA_CONTRATACION, 'DD-MON-YYYY') || ', ' || d.NOMBRE
    INTO v_resultado
    FROM EMPLEADO e
    INNER JOIN DEPARTAMENTO d ON e.ID_DEPARTAMENTO = d.ID_DEPARTAMENTO
    WHERE e.ID_EMPLEADO = v_empleado_id;

    RETURN v_resultado;
END OBTENER_EMPLEADO_POR_NOMBRE;
/

CREATE OR REPLACE FUNCTION NUMERO_TOTAL_COMPRAS_POR_CLIENTE (
    nombre_cliente IN VARCHAR2
) RETURN NUMBER
AS
    v_cliente_id CLIENTE.ID_CLIENTE%TYPE;
    v_total_compras NUMBER;
BEGIN
    -- Obtener el ID del cliente basado en su nombre
    SELECT ID_CLIENTE INTO v_cliente_id
    FROM CLIENTE
    WHERE UPPER(NOMBRE) = UPPER(nombre_cliente);

    -- Contar el número total de compras del cliente
    SELECT COUNT(*) INTO v_total_compras
    FROM COMPRA
    WHERE ID_CLIENTE = v_cliente_id;

    RETURN v_total_compras;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;
END NUMERO_TOTAL_COMPRAS_POR_CLIENTE;
/

CREATE OR REPLACE FUNCTION CONTAR_VENTAS_POR_PRODUCTO (
    nombre_producto IN VARCHAR2
) RETURN NUMBER
AS
    v_producto_id PRODUCTO.ID_PRODUCTO%TYPE;
    v_cantidad_ventas NUMBER;
BEGIN
    -- Obtener el ID del producto basado en su nombre
    SELECT ID_PRODUCTO INTO v_producto_id
    FROM PRODUCTO
    WHERE UPPER(NOMBRE) = UPPER(nombre_producto);

    -- Contar el número total de ventas del producto
    SELECT COUNT(*) INTO v_cantidad_ventas
    FROM COMPRA
    WHERE ID_PRODUCTO = v_producto_id;

    RETURN v_cantidad_ventas;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;
END CONTAR_VENTAS_POR_PRODUCTO;
/

CREATE OR REPLACE FUNCTION MOSTRAR_EMPLEADOS_POR_DEPARTAMENTO RETURN VARCHAR2
AS
    v_resultado VARCHAR2(4000); 
BEGIN
    FOR dept IN (SELECT D.NOMBRE AS DEPARTAMENTO, COUNT(E.ID_EMPLEADO) AS CANTIDAD_EMPLEADOS
                 FROM DEPARTAMENTO D
                 LEFT JOIN EMPLEADO E ON D.ID_DEPARTAMENTO = E.ID_DEPARTAMENTO
                 GROUP BY D.NOMBRE) LOOP
        v_resultado := v_resultado || 'Departamento: ' || dept.DEPARTAMENTO || ', Cantidad de empleados: ' || dept.CANTIDAD_EMPLEADOS || CHR(10);
    END LOOP;

    RETURN v_resultado;
END MOSTRAR_EMPLEADOS_POR_DEPARTAMENTO;
/


DROP TABLE COMPRA;
DROP TABLE PRODUCTO;
DROP TABLE INGREDIENTE_RECETA;
DROP TABLE RECETA;
DROP TABLE INGREDIENTE;
DROP TABLE CLIENTE;
DROP TABLE ORDEN;
DROP TABLE EMPLEADO;
DROP TABLE PROVEEDOR;
DROP TABLE DEPARTAMENTO;
