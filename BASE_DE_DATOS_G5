ALTER SESSION SET "_ORACLE_SCRIPT"=TRUE;

-- Creación de la tabla PROVEEDOR
CREATE TABLE PROVEEDOR (
    ID_PROVEEDOR NUMBER PRIMARY KEY,
    NOMBRE VARCHAR2(50),
    DIRECCION VARCHAR2(100),
    CORREO VARCHAR2(100),
    TELEFONO VARCHAR2(20)
);

-- Creación de la tabla DEPARTAMENTO 
CREATE TABLE DEPARTAMENTO (
    ID_DEPARTAMENTO NUMBER PRIMARY KEY,
    NOMBRE VARCHAR2(100)
);

-- Creación de la tabla CLIENTE
CREATE TABLE CLIENTE (
    ID_CLIENTE NUMBER PRIMARY KEY,
    NOMBRE VARCHAR2(50),
    APELLIDO VARCHAR2(50),
    DIRECCION VARCHAR2(100),
    CORREO VARCHAR2(100),
    TELEFONO VARCHAR2(20)
);

-- Creación de la tabla PRODUCTO
CREATE TABLE PRODUCTO (
    ID_PRODUCTO NUMBER PRIMARY KEY,
    NOMBRE VARCHAR2(50),
    PRECIO NUMBER,
    CANTIDAD NUMBER,
    FECHA_VENCIMIENTO DATE
);

-- Creación de la tabla COMPRA
CREATE TABLE COMPRA (
    ID_COMPRA NUMBER PRIMARY KEY,
    FECHA DATE,
    GANANCIA NUMBER,
    ID_CLIENTE NUMBER,
    ID_PRODUCTO NUMBER,
    CONSTRAINT FK_COMPRA_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE),
    CONSTRAINT FK_COMPRA_PRODUCTO FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTO(ID_PRODUCTO) -- Constraint para la llave foránea ID_PRODUCTO
);

-- Creación de la tabla INGREDIENTE
CREATE TABLE INGREDIENTE (
    ID_INGREDIENTE NUMBER PRIMARY KEY,
    NOMBRE VARCHAR2(50),
    CANTIDAD NUMBER,
    PRECIO_UNITARIO NUMBER,
    ID_PROVEEDOR NUMBER,
    CONSTRAINT FK_INGREDIENTE_PROVEEDOR FOREIGN KEY (ID_PROVEEDOR) REFERENCES PROVEEDOR(ID_PROVEEDOR)
);

-- Creación de la tabla RECETA
CREATE TABLE RECETA (
    ID_RECETA NUMBER PRIMARY KEY,
    NOMBRE_RECETA VARCHAR2(100)
);

-- Creación de la tabla de union INGREDIENTE_RECETA
CREATE TABLE INGREDIENTE_RECETA (
    ID_RECETA NUMBER,
    ID_INGREDIENTE NUMBER,
    CANTIDAD NUMBER,
    CONSTRAINT FK_INGREDIENTE_RECETA_RECETA FOREIGN KEY (ID_RECETA) REFERENCES RECETA(ID_RECETA),
    CONSTRAINT FK_INGREDIENTE_RECETA_INGREDIENTE FOREIGN KEY (ID_INGREDIENTE) REFERENCES INGREDIENTE(ID_INGREDIENTE),
    CONSTRAINT CK_INGREDIENTE_RECETA_CANTIDAD CHECK (CANTIDAD > 0)
);

-- Creación de la tabla ORDEN
CREATE TABLE ORDEN (
    ID_ORDEN NUMBER PRIMARY KEY,
    FECHA_ORDEN DATE,
    ESTADO_ORDEN VARCHAR2(50),
    ID_CLIENTE NUMBER,
    ID_PRODUCTO NUMBER, 
    CONSTRAINT FK_ORDEN_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE),
    CONSTRAINT FK_ORDEN_PRODUCTO FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTO(ID_PRODUCTO) -- Constraint para la llave foránea ID_PRODUCTO
);

-- Creación de la tabla EMPLEADO
CREATE TABLE EMPLEADO (
    ID_EMPLEADO NUMBER PRIMARY KEY,
    NOMBRE VARCHAR2(50),
    APELLIDO VARCHAR2(50),
    PUESTO VARCHAR2(50),
    SALARIO NUMBER,
    FECHA_CONTRATACION DATE,
    ID_DEPARTAMENTO NUMBER,
    CONSTRAINT FK_EMPLEADO_DEPARTAMENTO FOREIGN KEY (ID_DEPARTAMENTO) REFERENCES DEPARTAMENTO(ID_DEPARTAMENTO)
);

-- Procedimientos almacenados
SET SERVEROUTPUT ON;

-- Procedimientos almacenados
CREATE OR REPLACE PROCEDURE CONSULTAR_INGREDIENTES(
    p_nombre_ingrediente IN VARCHAR2
)
IS
    v_cantidad INGREDIENTE.CANTIDAD%TYPE;
    v_precio_unitario INGREDIENTE.PRECIO_UNITARIO%TYPE;
    v_nombre_proveedor PROVEEDOR.NOMBRE%TYPE;
BEGIN
    -- Buscar la información del ingrediente
    SELECT i.CANTIDAD, i.PRECIO_UNITARIO, p.NOMBRE
    INTO v_cantidad, v_precio_unitario, v_nombre_proveedor
    FROM INGREDIENTE i
    INNER JOIN PROVEEDOR p ON i.ID_PROVEEDOR = p.ID_PROVEEDOR
    WHERE i.NOMBRE = p_nombre_ingrediente;

    -- Mostrar la información
    DBMS_OUTPUT.PUT_LINE('Cantidad: ' || v_cantidad);
    DBMS_OUTPUT.PUT_LINE('Precio unitario: ' || v_precio_unitario);
    DBMS_OUTPUT.PUT_LINE('Proveedor: ' || v_nombre_proveedor);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No se encontró ningún ingrediente con ese nombre.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Ocurrió un error al procesar la solicitud.');
END obtener_info_ingrediente;
/

CREATE OR REPLACE PROCEDURE MOSTRAR_ORDEN_POR_CLIENTE (
    nombre_cliente IN VARCHAR2
) AS
    v_cliente_id CLIENTE.ID_CLIENTE%TYPE;
BEGIN
    -- Obtener el ID del cliente basado en su nombre
    SELECT ID_CLIENTE INTO v_cliente_id
    FROM CLIENTE
    WHERE UPPER(NOMBRE) = UPPER(nombre_cliente);

    -- Mostrar las órdenes del cliente
    FOR orden_rec IN (SELECT ORDEN.ID_ORDEN, ORDEN.FECHA_ORDEN, ORDEN.ESTADO_ORDEN, ORDEN.ID_PRODUCTO, PRODUCTO.NOMBRE AS NOMBRE_PRODUCTO
                      FROM ORDEN
                      JOIN PRODUCTO ON ORDEN.ID_PRODUCTO = PRODUCTO.ID_PRODUCTO
                      WHERE ORDEN.ID_CLIENTE = v_cliente_id) LOOP
        DBMS_OUTPUT.PUT_LINE('ID de Orden: ' || orden_rec.ID_ORDEN);
        DBMS_OUTPUT.PUT_LINE('Fecha de Orden: ' || TO_CHAR(orden_rec.FECHA_ORDEN, 'DD-MON-YYYY'));
        DBMS_OUTPUT.PUT_LINE('Estado de Orden: ' || orden_rec.ESTADO_ORDEN);
        DBMS_OUTPUT.PUT_LINE('ID de Producto: ' || orden_rec.ID_PRODUCTO);
        DBMS_OUTPUT.PUT_LINE('Nombre del Producto: ' || orden_rec.NOMBRE_PRODUCTO);
        DBMS_OUTPUT.PUT_LINE('------------------------------------');
    END LOOP;

    -- Si no se encuentra ninguna orden
    IF SQL%NOTFOUND THEN
        DBMS_OUTPUT.PUT_LINE('El cliente ' || nombre_cliente || ' no tiene órdenes.');
    END IF;
END;
/

CREATE OR REPLACE PROCEDURE OBTENER_EMPLEADO_POR_NOMBRE (
    nombre_empleado IN VARCHAR2
) AS
    v_empleado_id EMPLEADO.ID_EMPLEADO%TYPE;
    v_departamento_nombre DEPARTAMENTO.NOMBRE%TYPE;
BEGIN
    -- Obtener el ID del empleado basado en su nombre
    SELECT ID_EMPLEADO INTO v_empleado_id
    FROM EMPLEADO
    WHERE UPPER(NOMBRE) = UPPER(nombre_empleado);

    -- Obtener los detalles del empleado
    SELECT e.ID_EMPLEADO, e.NOMBRE, e.APELLIDO, e.PUESTO, e.SALARIO, e.FECHA_CONTRATACION, d.NOMBRE
    INTO v_empleado_id, v_departamento_nombre
    FROM EMPLEADO e
    INNER JOIN DEPARTAMENTO d ON e.ID_DEPARTAMENTO = d.ID_DEPARTAMENTO
    WHERE e.ID_EMPLEADO = v_empleado_id;

    -- Mostrar los detalles del empleado
    DBMS_OUTPUT.PUT_LINE('ID de Empleado: ' || v_empleado_id);
    DBMS_OUTPUT.PUT_LINE('Nombre: ' || nombre_empleado);
    DBMS_OUTPUT.PUT_LINE('Apellido: ' || v_apellido);
    DBMS_OUTPUT.PUT_LINE('Puesto: ' || v_puesto);
    DBMS_OUTPUT.PUT_LINE('Salario: ' || v_salario);
    DBMS_OUTPUT.PUT_LINE('Fecha de Contratación: ' || TO_CHAR(v_fecha_contratacion, 'DD-MON-YYYY'));
    DBMS_OUTPUT.PUT_LINE('Departamento: ' || v_departamento_nombre);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No se encontró ningún empleado con el nombre ' || nombre_empleado);
END;
/

CREATE OR REPLACE PROCEDURE NUMERO_TOTAL_COMPRAS_POR_CLIENTE (
    nombre_cliente IN VARCHAR2
) AS
    v_cliente_id CLIENTE.ID_CLIENTE%TYPE;
    v_total_compras NUMBER;
BEGIN
    -- Obtener el ID del cliente basado en su nombre
    SELECT ID_CLIENTE INTO v_cliente_id
    FROM CLIENTE
    WHERE UPPER(NOMBRE) = UPPER(nombre_cliente);

    -- Contar el número total de compras del cliente
    SELECT COUNT(*) INTO v_total_compras
    FROM COMPRA
    WHERE ID_CLIENTE = v_cliente_id;

    -- Mostrar el número total de compras del cliente
    DBMS_OUTPUT.PUT_LINE('El cliente ' || nombre_cliente || ' ha realizado un total de ' || v_total_compras || ' compras.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No se encontró ningún cliente con el nombre ' || nombre_cliente);
END;
/

CREATE OR REPLACE PROCEDURE CONTAR_VENTAS_POR_PRODUCTO (
    nombre_producto IN VARCHAR2
) AS
    v_producto_id PRODUCTO.ID_PRODUCTO%TYPE;
    v_cantidad_ventas NUMBER;
BEGIN
    -- Obtener el ID del producto basado en su nombre
    SELECT ID_PRODUCTO INTO v_producto_id
    FROM PRODUCTO
    WHERE UPPER(NOMBRE) = UPPER(nombre_producto);

    -- Contar el número total de ventas del producto
    SELECT COUNT(*) INTO v_cantidad_ventas
    FROM COMPRA
    WHERE ID_PRODUCTO = v_producto_id;

    -- Mostrar la cantidad total de ventas del producto
    DBMS_OUTPUT.PUT_LINE('El producto ' || nombre_producto || ' ha sido vendido ' || v_cantidad_ventas || ' veces.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No se encontró ningún producto con el nombre ' || nombre_producto);
END;
/

CREATE OR REPLACE PROCEDURE MOSTRAR_EMPLEADOS_POR_DEPARTAMENTO AS
BEGIN
    FOR dept IN (SELECT D.NOMBRE AS DEPARTAMENTO, COUNT(E.ID_EMPLEADO) AS CANTIDAD_DE_EMPLEADOS
                 FROM DEPARTAMENTO D
                 LEFT JOIN EMPLEADO E ON D.ID_DEPARTAMENTO = E.ID_DEPARTAMENTO
                 GROUP BY D.NOMBRE) LOOP
        DBMS_OUTPUT.PUT_LINE('Departamento: ' || dept.DEPARTAMENTO || ', Cantidad de empleados: ' || dept.CANTIDAD_EMPLEADOS);
    END LOOP;
END;
/




--VISTAS--

--Vista de empleados por departamento:
CREATE VIEW EMPLEADOS_POR_DEPARTAMENTO AS
SELECT D.NOMBRE, COUNT(*) AS CANTIDAD_EMPLEADOS, AVG(E.SALARIO) AS SALARIO_PROMEDIO
FROM EMPLEADO E
JOIN DEPARTAMENTO D ON E.ID_DEPARTAMENTO = D.ID_DEPARTAMENTO
GROUP BY D.ID_DEPARTAMENTO, D.NOMBRE;

--Vista de productos por vencimiento:
CREATE VIEW PRODUCTOS_POR_VENCIMIENTO AS
SELECT P.NOMBRE, P.PRECIO, P.CANTIDAD, P.FECHA_VENCIMIENTO,
CASE
    WHEN P.FECHA_VENCIMIENTO <= SYSDATE THEN 'Vencido'
    WHEN P.FECHA_VENCIMIENTO BETWEEN SYSDATE AND SYSDATE + 30 THEN 'Por vencer'
    ELSE 'Vigente'
END AS ESTADO_VENCIMIENTO
FROM PRODUCTO P;

--Vista de detalles de ingredientes con la receta y el proveedor:
CREATE VIEW VISTA_INGREDIENTES_RECETA_PROVEEDOR AS
SELECT R.NOMBRE_RECETA, I.NOMBRE AS INGREDIENTE, I.CANTIDAD, I.PRECIO_UNITARIO, PR.NOMBRE AS PROVEEDOR
FROM INGREDIENTE_RECETA IR
JOIN INGREDIENTE I ON IR.ID_INGREDIENTE = I.ID_INGREDIENTE
JOIN PROVEEDOR PR ON I.ID_PROVEEDOR = PR.ID_PROVEEDOR
JOIN RECETA R ON IR.ID_RECETA = R.ID_RECETA;

--CLIENTES.1
CREATE VIEW VISTA_CLIENTES AS
SELECT C.ID_CLIENTE, C.NOMBRE, C.APELLIDO, C.DIRECCION, C.CORREO, C.TELEFONO
FROM CLIENTE C;


--GANANCIAS TOTALES DE COMPRAS DE CADA CLIENTE Y SU NOMBRE.1
CREATE VIEW VISTA_GANANCIAS_TOTALES AS
SELECT C.ID_CLIENTE, C.NOMBRE, C.APELLIDO, SUM(COMPR.GANANCIA) AS GANANCIAS_TOTALES
FROM COMPRA COMPR
JOIN CLIENTE C ON C.ID_CLIENTE = COMPR.ID_CLIENTE
GROUP BY C.ID_CLIENTE, C.NOMBRE, C.APELLIDO;

--ORDENES POR CADA CLIENTE:
CREATE VIEW VISTA_ORDEDENES_POR_CLIENTE AS
SELECT C.ID_CLIENTE, C.NOMBRE, C.APELLIDO, COUNT(ORD.ID_ORDEN) AS CANTIDAD_ORDENES
FROM ORDEN ORD
JOIN CLIENTE C ON ORD.ID_CLIENTE = C.ID_CLIENTE
GROUP BY C.ID_CLIENTE, C.NOMBRE, C.APELLIDO;

--PROVEEDORES.1
CREATE VIEW VISTA_PROVEEDORES AS
SELECT *
FROM PROVEEDOR;


